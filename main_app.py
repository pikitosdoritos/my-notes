import sys
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QTableView, QMessageBox, QAbstractItemView, QHeaderView,
    QDialog 
)
from PySide6.QtGui import QStandardItemModel, QStandardItem
from PySide6.QtCore import Qt, Slot

import database
from item_dialog import ItemDialog

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("PySide6 CRUD –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üìù")
        self.setGeometry(100, 100, 700, 500)

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        self.layout = QVBoxLayout(self.central_widget)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.table_view = QTableView()
        self.table_view.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows) # –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏
        self.table_view.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers) # –ó–∞–ø—Ä–µ—Ç –ø—Ä—è–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
        self.table_view.setAlternatingRowColors(True) # –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ —Å—Ç—Ä–æ–∫

        self.model = QStandardItemModel()
        self.model.setHorizontalHeaderLabels(['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ'])
        self.table_view.setModel(self.model)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        self.table_view.setColumnHidden(0, True) # –°–∫—Ä—ã—Ç—å —Å—Ç–æ–ª–±–µ—Ü ID
        self.table_view.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch) # –†–∞—Å—Ç—è–Ω—É—Ç—å —Å—Ç–æ–ª–±–µ—Ü "–ù–∞–∑–≤–∞–Ω–∏–µ"
        self.table_view.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch) # –†–∞—Å—Ç—è–Ω—É—Ç—å —Å—Ç–æ–ª–±–µ—Ü "–û–ø–∏—Å–∞–Ω–∏–µ"


        self.layout.addWidget(self.table_view)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.button_layout = QHBoxLayout()

        self.add_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        self.add_button.clicked.connect(self.open_add_dialog)
        self.button_layout.addWidget(self.add_button)

        self.edit_button = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.edit_button.clicked.connect(self.open_edit_dialog)
        self.button_layout.addWidget(self.edit_button)

        self.delete_button = QPushButton("‚ùå –£–¥–∞–ª–∏—Ç—å")
        self.delete_button.clicked.connect(self.delete_selected_item)
        self.button_layout.addWidget(self.delete_button)

        self.layout.addLayout(self.button_layout)

        self.load_data_into_table()

    def load_data_into_table(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ."""
        self.model.removeRows(0, self.model.rowCount()) # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        items = database.get_all_items()
        for item in items:
            row = [
                QStandardItem(str(item['id'])),
                QStandardItem(item['name']),
                QStandardItem(item['description'])
            ]
            # –î–µ–ª–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏, –µ—Å–ª–∏ –±—ã –Ω–µ –±—ã–ª–æ setEditTriggers
            for i in row:
                i.setEditable(False)
            self.model.appendRow(row)

    @Slot()
    def open_add_dialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        dialog = ItemDialog(self)
        if dialog.exec() == QDialog.DialogCode.Accepted: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ "OK"
            name, description = dialog.get_data()
            if not name:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                return
            try:
                database.add_item(name, description)
                self.load_data_into_table()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–≠–ª–µ–º–µ–Ω—Ç '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç: {e}")


    def get_selected_item_id_and_row(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∏ –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –∏–ª–∏ None, None."""
        selected_indexes = self.table_view.selectionModel().selectedRows()
        if not selected_indexes:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            return None, None
        selected_row_index = selected_indexes[0].row() # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        item_id_item = self.model.item(selected_row_index, 0) # ID –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ (—Å–∫—Ä—ã—Ç–æ–º)
        if item_id_item:
            return int(item_id_item.text()), selected_row_index
        return None, None


    @Slot()
    def open_edit_dialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        item_id, selected_row_index = self.get_selected_item_id_and_row()
        if item_id is None:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        current_name_item = self.model.item(selected_row_index, 1)
        current_desc_item = self.model.item(selected_row_index, 2)

        current_name = current_name_item.text() if current_name_item else ""
        current_description = current_desc_item.text() if current_desc_item else ""

        dialog = ItemDialog(self, item_id=item_id, name=current_name, description=current_description)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            new_name, new_description = dialog.get_data()
            if not new_name:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                return
            try:
                database.update_item(item_id, new_name, new_description)
                self.load_data_into_table()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–≠–ª–µ–º–µ–Ω—Ç '{new_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç: {e}")


    @Slot()
    def delete_selected_item(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
        item_id, selected_row_index = self.get_selected_item_id_and_row()
        if item_id is None:
            return

        item_name_item = self.model.item(selected_row_index, 1) # –ò–º—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        item_name = item_name_item.text() if item_name_item else "–í—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç"

        reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                                     f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç '{item_name}'?",
                                     QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                                     QMessageBox.StandardButton.No)

        if reply == QMessageBox.StandardButton.Yes:
            try:
                database.delete_item(item_id)
                self.load_data_into_table() # –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–≠–ª–µ–º–µ–Ω—Ç '{item_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç: {e}")


def main():
    app = QApplication()
    # database.initialize_database() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ë–î –∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω—ã
    window = MainWindow()
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()